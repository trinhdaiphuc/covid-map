{"version":3,"sources":["component/CovidGoogleMap.js","component/PatientInfo.js","component/PatientList.js","component/SeekBar.js","component/CovidDashboard.js","App.js","serviceWorker.js","index.js"],"names":["options","closeBoxURL","enableEventPropagation","CovidGoogleMap","onPatientMarkerClicked","center","patients","zoom","currentPatientIndex","googleMapsApiKey","mapContainerStyle","height","width","map","patient","index","key","position","lat","lng","onClick","className","name","PatientInfo","address","note","verifyDate","formatDate","moment","Date","format","Row","React","memo","data","style","items","onPatientListClicked","item","isActive","newStyle","border","Button","variant","areEqual","totalListItem","length","patientsData","createItemData","listRef","createRef","useEffect","current","scrollToItem","id","ref","itemCount","itemSize","itemData","useStyles","makeStyles","root","padding","SeekBar","value","fromDate","toDate","onChange","maxValue","onAutoPlay","autoPlay","classes","marks","label","Typography","gutterBottom","Col","xs","IconButton","fontSize","color","Grid","container","spacing","Slider","step","valueLabel","rail","track","min","max","_event","newValue","aria-labelledby","valueLabelFormat","x","add","valueLabelDisplay","diff","compare","a","b","comparison","getPatientsBeforeDate","date","filter","CovidDashboard","useState","currentPatient","setCurrentPatient","setCurrentPatientIndex","setPatients","defaultPatients","setDefaultPatients","valueSeekBar","setValueSeekBar","setAutoPlay","currentCenter","patientClickedHandler","increaseSeekValue","useCallback","currentDate","getPatients","newInterval","setInterval","clearInterval","fetch","then","res","json","result","sortPatientsList","sort","Container","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c40c79d2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { GoogleMap, LoadScript, Marker, InfoBox } from \"@react-google-maps/api\";\r\n\r\nconst options = { closeBoxURL: \"\", enableEventPropagation: true };\r\n\r\nconst CovidGoogleMap = ({\r\n  onPatientMarkerClicked,\r\n  center,\r\n  patients,\r\n  zoom,\r\n  currentPatientIndex,\r\n}) => {\r\n  const APIKey = \"AIzaSyBZolpm92zx6q9DIdM0xdo15AQuCkclyGs\";\r\n  return (\r\n    <LoadScript googleMapsApiKey={APIKey}>\r\n      <GoogleMap\r\n        mapContainerStyle={{\r\n          height: \"600px\",\r\n          width: \"100%\",\r\n        }}\r\n        zoom={zoom}\r\n        center={center}\r\n      >\r\n        {patients.map((patient, index) => (\r\n          <Marker\r\n            key={index}\r\n            position={{ lat: patient.lat, lng: patient.lng }}\r\n            onClick={() => {\r\n              onPatientMarkerClicked(patient, index);\r\n            }}\r\n          ></Marker>\r\n        ))}\r\n        {currentPatientIndex != null && (\r\n          <InfoBox position={center} options={options}>\r\n            <div className=\"info-box\">{patients[currentPatientIndex].name}</div>\r\n          </InfoBox>\r\n        )}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default CovidGoogleMap;\r\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst PatientInfo = ({ name, address, note, verifyDate }) => {\n  const newDate = moment(new Date(verifyDate));\n  const formatDate = newDate.format(\"DD/MM/YYYY\");\n  return (\n    <ul>\n      <li>Tên: {name}</li>\n      <li>Địa chỉ: {address}</li>\n      <li>Ghi chú: {note}</li>\n      <li>Ngày xác nhận: {formatDate}</li>\n    </ul>\n  );\n};\n\nexport default PatientInfo;\n","import React, { useEffect } from \"react\";\r\nimport { FixedSizeList as List, areEqual } from \"react-window\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst Row = React.memo(({ data, index, style }) => {\r\n  const { items, onPatientListClicked, currentPatientIndex } = data;\r\n  const item = items[index];\r\n  const isActive = index === currentPatientIndex ? \"primary\" : \"light\";\r\n  const newStyle = { ...style, border: `1px solid #000000` };\r\n  return (\r\n    <Button\r\n      onClick={() => onPatientListClicked(item, index)}\r\n      variant={isActive}\r\n      style={newStyle}\r\n    >\r\n      <div className=\"list-row\">{item.name}</div>\r\n    </Button>\r\n  );\r\n}, areEqual);\r\n\r\nconst createItemData = (items, onPatientListClicked, currentPatientIndex) => ({\r\n  items,\r\n  onPatientListClicked,\r\n  currentPatientIndex,\r\n});\r\n\r\nconst PatientList = ({\r\n  patients,\r\n  onPatientListClicked,\r\n  currentPatientIndex,\r\n}) => {\r\n  const totalListItem = patients.length;\r\n  const patientsData = createItemData(\r\n    patients,\r\n    onPatientListClicked,\r\n    currentPatientIndex\r\n  );\r\n  const listRef = React.createRef();\r\n  useEffect(() => {\r\n    if (currentPatientIndex != null) {\r\n      listRef.current.scrollToItem(currentPatientIndex);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"list-group\">\r\n      <h6>Danh sách bệnh nhân</h6>\r\n      <div id=\"list-component\">\r\n        <List\r\n          ref={listRef}\r\n          height={310}\r\n          itemCount={totalListItem}\r\n          itemSize={35}\r\n          width={\"100%\"}\r\n          itemData={patientsData}\r\n        >\r\n          {Row}\r\n        </List>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(PatientList);\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport moment from \"moment\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    padding: \"10px\",\r\n  },\r\n});\r\n\r\nconst SeekBar = ({\r\n  value,\r\n  fromDate,\r\n  toDate,\r\n  onChange,\r\n  maxValue,\r\n  onAutoPlay,\r\n  autoPlay,\r\n}) => {\r\n  const classes = useStyles();\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: moment(fromDate).format(\"DD/MM/YYYY\"),\r\n    },\r\n    {\r\n      value: maxValue,\r\n      label: moment(toDate).format(\"DD/MM/YYYY\"),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"continuous-slider\" gutterBottom>\r\n        Hiển thị danh sách bệnh nhân theo ngày\r\n      </Typography>\r\n      <Row>\r\n        <Col xs={2}>\r\n          <IconButton onClick={() => onAutoPlay()}>\r\n            {autoPlay ? (\r\n              <PauseIcon style={{ fontSize: 50, color: \"#3F51B5\" }}></PauseIcon>\r\n            ) : (\r\n              <PlayArrowIcon\r\n                style={{ fontSize: 50, color: \"#3F51B5\" }}\r\n              ></PlayArrowIcon>\r\n            )}\r\n          </IconButton>\r\n        </Col>\r\n        <Col xs={10}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs>\r\n              <Slider\r\n                step={1}\r\n                value={value ? value : 0}\r\n                classes={{\r\n                  valueLabel: \"value-label\",\r\n                  rail: \"rail\",\r\n                  track: \"track\",\r\n                }}\r\n                min={0}\r\n                max={maxValue}\r\n                onChange={(_event, newValue) => {\r\n                  onChange(newValue);\r\n                }}\r\n                aria-labelledby=\"continuous-slider\"\r\n                valueLabelFormat={(x) =>\r\n                  moment(fromDate).add(x, \"days\").format(\"DD/MM/YYYY\")\r\n                }\r\n                valueLabelDisplay=\"on\"\r\n                marks={marks}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeekBar;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CovidGoogleMap from \"./CovidGoogleMap\";\r\nimport PatientInfo from \"./PatientInfo\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport PatientList from \"./PatientList\";\r\nimport SeekBar from \"./SeekBar\";\r\nimport moment from \"moment\";\r\n\r\nconst fromDate = new Date(\"12/8/2019\");\r\nconst toDate = new Date();\r\nconst maxValue = moment(toDate).diff(fromDate, \"days\");\r\n\r\nconst compare = (a, b) => {\r\n  let comparison = 0;\r\n  if (a.verifyDate > b.verifyDate) {\r\n    comparison = 1;\r\n  } else if (a.verifyDate < b.verifyDate) {\r\n    comparison = -1;\r\n  }\r\n  return comparison * -1;\r\n};\r\n\r\nconst getPatientsBeforeDate = (patients, date) => {\r\n  const newPatients = patients.filter(\r\n    (patient) => date.diff(patient.verifyDate, \"days\") > 0\r\n  );\r\n  return newPatients;\r\n};\r\n\r\nconst CovidDashboard = () => {\r\n  const [currentPatient, setCurrentPatient] = useState();\r\n  const [currentPatientIndex, setCurrentPatientIndex] = useState();\r\n  const [patients, setPatients] = useState([]);\r\n  const [defaultPatients, setDefaultPatients] = useState([]);\r\n  const [valueSeekBar, setValueSeekBar] = useState(0);\r\n  const [autoPlay, setAutoPlay] = useState(false);\r\n  const defaultCenter = { lat: 16.047079, lng: 108.20623 };\r\n\r\n  const currentCenter = currentPatient\r\n    ? { lat: currentPatient.lat, lng: currentPatient.lng }\r\n    : defaultCenter;\r\n  const zoom = currentPatient ? 12 : 6;\r\n\r\n  const patientClickedHandler = (patient, index) => {\r\n    setAutoPlay(false);\r\n    setCurrentPatient(patient);\r\n    setCurrentPatientIndex(index);\r\n  };\r\n\r\n  const increaseSeekValue = useCallback(() => {\r\n    const currentDate = moment(fromDate).add(valueSeekBar, \"days\");\r\n    const getPatients = getPatientsBeforeDate(defaultPatients, currentDate);\r\n    setPatients(getPatients);\r\n    setCurrentPatient(null);\r\n    setCurrentPatientIndex(null);\r\n    setValueSeekBar(valueSeekBar + 1);\r\n  }, [valueSeekBar, defaultPatients]);\r\n\r\n  const onChangeSeekBarHandler = (newValue) => {\r\n    setAutoPlay(false);\r\n    setValueSeekBar(newValue);\r\n    const currentDate = moment(fromDate).add(newValue, \"days\");\r\n    const getPatients = getPatientsBeforeDate(defaultPatients, currentDate);\r\n    setPatients(getPatients);\r\n    setCurrentPatient(null);\r\n    setCurrentPatientIndex(null);\r\n  };\r\n\r\n  const onAutoPlay = () => {\r\n    setAutoPlay(!autoPlay);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (autoPlay) {\r\n      const newInterval = setInterval(increaseSeekValue, 500);\r\n      return () => {\r\n        clearInterval(newInterval);\r\n      };\r\n    }\r\n  }, [autoPlay, increaseSeekValue]);\r\n\r\n  useEffect(() => {\r\n    if (valueSeekBar > maxValue) {\r\n      setValueSeekBar(maxValue);\r\n      setAutoPlay(false);\r\n    }\r\n  }, [valueSeekBar]);\r\n\r\n  useEffect(() => {\r\n    const url = \"https://cors-anywhere.herokuapp.com/https://maps.vnpost.vn/apps/covid19/api/patientapi/list\";\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        const sortPatientsList = result.data.sort(compare);\r\n        setDefaultPatients(sortPatientsList);\r\n        const getPatients = getPatientsBeforeDate(\r\n          sortPatientsList,\r\n          moment(fromDate)\r\n        );\r\n        setPatients(getPatients);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs={8}>\r\n          <CovidGoogleMap\r\n            onPatientMarkerClicked={patientClickedHandler}\r\n            center={currentCenter}\r\n            patients={patients}\r\n            zoom={zoom}\r\n            currentPatientIndex={currentPatientIndex}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs={4}>\r\n          <Row id=\"patient-info\">\r\n            <h6>Thông tin bệnh nhân</h6>\r\n            <div>\r\n              {currentPatient && (\r\n                <PatientInfo\r\n                  name={currentPatient.name}\r\n                  address={currentPatient.address}\r\n                  note={currentPatient.note}\r\n                  verifyDate={currentPatient.verifyDate}\r\n                />\r\n              )}\r\n            </div>\r\n          </Row>\r\n          <Row>\r\n            <PatientList\r\n              patients={patients}\r\n              onPatientListClicked={patientClickedHandler}\r\n              currentPatientIndex={currentPatientIndex}\r\n            />\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <SeekBar\r\n        fromDate={fromDate}\r\n        toDate={toDate}\r\n        value={valueSeekBar}\r\n        maxValue={maxValue}\r\n        onChange={onChangeSeekBarHandler}\r\n        onAutoPlay={onAutoPlay}\r\n        autoPlay={autoPlay}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CovidDashboard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CovidDashboard from \"./component/CovidDashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CovidDashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <h5>THÔNG TIN ĐIỂM ĐẾN CỦA CÁC CA DƯƠNG TÍNH VỚI SARS-CoV-2</h5>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}